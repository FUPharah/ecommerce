generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id String @id @default(uuid())
  name String
  userId String
  billboards Billboard[] @relation("StoreBillboard")
  categories Category[] @relation("StoreCategory")
  sizes Size[] @relation("StoreSize")
  colours Colour[] @relation("StoreColour")
  products Product[] @relation("StoreProduct")
  orders Order[] @relation("StoreOrder")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Billboard {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreBillboard", fields: [storeId], references: [id])
  label String
  imageUrl String
  categories Category[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([storeId])
}

model Category {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreCategory", fields: [storeId], references: [id])
  billboardId String
  billboard Billboard @relation(fields: [billboardId], references: [id])
  products Product[] @relation("CategoryProduct")
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreSize", fields: [storeId], references: [id])
  products Product[]
  name String
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([storeId])
}

model Colour {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreColour", fields: [storeId], references: [id])
  products Product[]
  name String
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([storeId])
}

model Product {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreProduct", fields: [storeId], references: [id])
  categoryId String
  category Category @relation("CategoryProduct", fields: [categoryId], references: [id])
  name String
  price Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  sizeId String
  size Size @relation(fields: [sizeId], references: [id])
  colourId String
  colour Colour @relation(fields: [colourId], references: [id])
  images Image[]
  orderItems OrderItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colourId])
}

model Image {
  id String @id @default(uuid())
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([productId])
}

model Order {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid Boolean @default(false)
  phone String @default("")
  email String @default("")
  address String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([storeId])
}

model OrderItem {
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product Product @relation(fields: [productId], references: [id])
  @@index([orderId])
  @@index([productId])
}
